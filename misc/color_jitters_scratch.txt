##### color jitters scratch #####
- color jitter noticed in pink-purple hues of sleep timer
- symptoms
    - hue unstable
    - intensity flickers

### recreation ###
- happened in sleep time leg
    1. red: 50, green: 0, blue: 100
    2. red: 100, green: 0, blue: 0
- recreation
    1. 0%   : red: 50, green: 0, blue: 100      : not noticed
    2. 25%  : red: 68, green: 0, blue: 75       : jitter noticed
    3. 50%  : red: 75, green: 0, blue: 50       : jitter noticed
    4. 75%  : red: 88, green: 0, blue: 25       : jitter noticed
    5. 100% : red: 100, green: 0, blue: 0       : not noticed
    <- let's adjust a condition w/ jitter by setting one output to an extreme
    6.      : red: 75, green: 0, blue: 100      : not noticed       <- 3. but blue at 100
    7.      : red: 75, green: 0, blue: 0        : not noticed       <- 3. but blue at 0
    7.      : red: 100, green: 0, blue: 50      : not noticed       <- 3. but red at 100
    8.      : red: 0, green: 0, blue: 50        : not noticed       <- 3. but red at 0
    <- THEORY: jitter caused by multiple outputs not being at an extreme... let's expand to 3 colors
    9.      : red: 100, green: 100, blue: 50    : not noticed       
    10.     : red: 100, green: 50, blue: 50     : jitter noticed    <- 9. but with green & blue not at extreme
    11.     : red: 50, green: 100, blue: 50     : jitter noticed    <- 9. but with red & blue not at extreme
    12.     : red: 50, green: 50, blue: 100     : jitter noticed    <- 9. but with red & green not at extreme
    13.     : red: 50, green: 50, blue: 50      : jitter noticed    <- all in middle
    <- expanding to beyond just 50
    14.     : red: 75, green: 0, blue: 75       : jitter noticed, but less than when both at 50
    15.     : red: 25, green: 0, blue: 25       : jitter noticed, but less than when both at 50
    16.     : red: 75, green: 0, blue: 50       : jitter noticed, but maybe less than when both at 50?
    17.     : red: 75, green: 0, blue: 50       : jitter noticed, but maybe less than when both at 50?
    <- more experimentation of jitter intensity dependent on where in middle output value is set
    18.     : red: 75, green: 75, blue: 75      : jitter noticed, but less than when all at 50
    19.     : red: 25, green: 25, blue: 25      : jitter noticed, but maybe less than when both at 50?

- THEORY:
    - error case
        - controller causes jitter when multiple outputs are not at extremes
        - more intense when more outputs are not at extremes
        - possibly more intense closer to midpoint between extremes the output values are
    - resources
        1. Offical Raspberry Pi Docs: GPIO (https://www.raspberrypi.org/documentation/usage/gpio/)
        2. Offical Raspberry Pi Docs: GPIO in python (https://www.raspberrypi.org/documentation/usage/gpio/python/README.md)
        3. GPIO Zero Docs (https://gpiozero.readthedocs.io/en/stable/index.html)
            - can support HW PWM thru RPIOPin or PiGPIOPin
            - appears PWMLED defaults to SW PWM
        4. RPI.GPIO Landing Page (https://pypi.org/project/RPi.GPIO/)
            - mentions does not support HW PWM
        5. RPI.GPIO Homepage (https://sourceforge.net/projects/raspberry-gpio-python/)
            - PWM page of wiki (https://sourceforge.net/p/raspberry-gpio-python/wiki/PWM/)
    - background
        - only 4 GPIO pins allow hardware PWM (12, 13, 18, 19), rest only allow software PWM
            - used RPI.GPIO library only supports SW PWM
        - hardware vs software PWM on pi 
            - (https://raspberrypi.stackexchange.com/a/100644)
            1. fully hardware PWM
                - available on 12, 13, 18, 19, but 12/18 & 13/19 are on same channel
                    - means cannot be controlled at same time
                - smoothest PWM control generated by Pi's PWM peripheral
            2. DMA timed PWM
                - timing controlled by DMA peripheral
                - between fully HW PWM and SW PWM
                - more limited in frequencies
                - available on any GPIO on 'expansion header'
                    - 'All GPIO may have different settings'
                    <- unclear what this means
            3. SW PWM
                - timing controlled by linux scheduler
                - much less accurate than DMA or HW PWM, especially if more GPIO being controlled
                - available on any GPIO on 'expansion header'
                    - 'All GPIO may have different settings'
                    <- unclear what this means again
                - 'LED brightness will suffer from glitches'
            - comment: 'is it correct that HW PWM is only accessible from C library, python library uses SW PWM?
                - 'depends, pigpio python uses HW PWM'
    - CONCLUSION:
        - use of poorly timed SW PWM causes jitters
            - when controlling more SW PWM, timing gets less and less accurate
            - when channel is set to an extreme, timing accuracy no longer matters
                - library may have shortcut to not actually use PWM if at an extreme
            - effects of poor timing may be more noticable when closer to 50%
    - SOLUTION:
        1. switch from SW PWM to DMA PWM or HW PWM
            - would require switching libraries to GPIO Zero, pigpio or others
            - may require switching pins
                - just moving 2 to HW PWM may help
        2. Don't have 2+ outputs not at extreme ever
        3. reduce PWM frequency
            - longer period mean exact timing accuracy matters less
            - currently at 1000
                - example on RPI.GPIO PWN wiki uses 50
            <- changing PWM freq 1000 -> 100 elminated jitter w/ all outputs in the middle
                - jitter appears when r,g,b at 50% when PWM freq above ~600
                - colors flicker when PWM freq below ~75

- SUMMARY
    - solution for now: reduce PWM freq 1k -> 100
        - elminates jitter under current setup
    - may be possible when >4 PWM outputs, may need to switch to DMA PWM or HW PWM
        - will need to switch PWM control libraries




    
